Prompt for Creating a Miniature Django CRM System
Objective
Create a lightweight, functional Customer Relationship Management (CRM) system using the Django framework, inspired by the flatplanet/Django-CRM repository on GitHub. The system should focus on core CRM functionality: managing customer records with CRUD (Create, Read, Update, Delete) operations. The implementation should be minimal, using a simple SQLite database, basic Django templates for the user interface, and Django’s built-in admin interface for administrative access. The system should be easy to set up, run locally, and extend if needed.
Project Requirements
Functional Requirements

Customer Management:
Allow users to add, view, edit, and delete customer records.
Each customer record should include:
Name (text, required, max 100 characters)
Email (email field, unique, required)
Phone (text, optional, max 15 characters)
Created At (timestamp, automatically set on creation)




User Interface:
Provide a simple web interface using Django templates to:
Display a list of all customers in a table.
Offer forms to add or edit customer details.
Include a confirmation step for deleting customers.


Style the interface with minimal CSS (inline or in templates) for a clean, professional look.


Admin Interface:
Integrate with Django’s admin interface to allow authenticated users to manage customers.
Require login for admin access.


Security:
Use Django’s CSRF protection for form submissions.
Restrict admin interface access to authenticated superusers.
Keep the frontend (customer list and forms) publicly accessible for simplicity.


Database:
Use SQLite as the database for simplicity and quick setup.
Ensure the database schema supports the customer model.



Non-Functional Requirements

Simplicity:
Keep the codebase minimal, avoiding unnecessary dependencies or complex features.
Exclude advanced CRM features like email marketing, task management, or analytics.


Compatibility:
Use Django’s stable version (e.g., Django 4.2 or latest compatible at the time of development).
Ensure the system runs on Python 3.8+.


Extensibility:
Structure the code to allow easy addition of features (e.g., more fields, user roles, or integrations).


Documentation:
Include a README.md with setup and usage instructions.
Comment the code where necessary to explain key functionality.



Project Structure
The project should follow a standard Django project structure with one app (crm) for customer management. The expected structure is:
mini-django-crm/
├── crm/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   ├── models.py
│   ├── forms.py
│   ├── templates/
│   │   ├── base.html
│   │   ├── customer_list.html
│   │   ├── customer_form.html
│   ├── urls.py
│   ├── views.py
├── mini_django_crm/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
├── manage.py
├── requirements.txt
├── db.sqlite3
├── README.md

Implementation Steps
1. Set Up the Django Project

Install Dependencies:
Install Python 3.8+ and Django using pip.
Generate a requirements.txt file with pip freeze > requirements.txt.


Create Project and App:
Run django-admin startproject mini_django_crm to create the project.
Run python manage.py startapp crm to create the crm app.
Add 'crm' to INSTALLED_APPS in mini_django_crm/settings.py.



2. Define the Customer Model

In crm/models.py, create a Customer model with the following fields:
name: CharField, max length 100, required.
email: EmailField, unique, required.
phone: CharField, max length 15, optional (blank=True).
created_at: DateTimeField, auto-set on creation.
Include a __str__ method to return the customer’s name.


Run migrations to create the database schema:python manage.py makemigrations
python manage.py migrate



3. Register the Model in Admin

In crm/admin.py, register the Customer model with Django’s admin interface to allow superusers to manage customers.

4. Create a Form

In crm/forms.py, create a CustomerForm using Django’s ModelForm:
Map to the Customer model.
Include fields: name, email, phone.



5. Implement Views

In crm/views.py, create views for:
List View: Display all customers in a table.
Create View: Render and process a form to add a new customer.
Update View: Render and process a form to edit an existing customer.
Delete View: Display a confirmation page and delete a customer upon confirmation.


Use Django’s generic functions (e.g., render, redirect, get_object_or_404) for simplicity.

6. Set Up URL Routing

In crm/urls.py, define URL patterns for:
'': List all customers (customer_list).
'create/': Add a new customer (customer_create).
'update/<int:pk>/': Edit a customer by primary key (customer_update).
'delete/<int:pk>/': Delete a customer by primary key (customer_delete).


In mini_django_crm/urls.py, include the crm app’s URLs and map the admin interface to 'admin/'.

7. Create Templates

Base Template (crm/templates/base.html):
Define a basic HTML structure with a <title> of “Mini Django CRM”.
Include minimal CSS (inline or in a <style> tag) for a clean table and form layout.
Use a {% block content %} to allow content extension.


Customer List Template (crm/templates/customer_list.html):
Extend base.html.
Display a table with columns: Name, Email, Phone, Actions.
Include links to edit or delete each customer.
Add a link to create a new customer.
Handle empty states (e.g., “No customers found”).


Customer Form Template (crm/templates/customer_form.html):
Extend base.html.
Display a form for adding or editing a customer, using form.as_p for simplicity.
Include CSRF token and a “Save” button.
For delete actions, show a confirmation form with the customer’s name and a “Confirm Delete” button.
Include a “Cancel” link to return to the customer list.



8. Configure Authentication

Create a superuser for admin access:python manage.py createsuperuser


Ensure the admin interface requires login.
Keep the frontend (list, create, update, delete) publicly accessible for simplicity.

9. Test and Run

Start the development server:python manage.py runserver


Test the application at http://127.0.0.1:8000/ for the customer list and http://127.0.0.1:8000/admin/ for the admin interface.
Verify all CRUD operations work as expected.

10. Document the Project

Create a README.md file with:
Project title and description.
Setup instructions (e.g., install dependencies, run migrations, create superuser).
Usage instructions (e.g., how to access the frontend and admin interface).
Optional: Notes on extending the project.



Deliverables

A fully functional Django project with the structure outlined above.
Source code files:
crm/models.py: Customer model.
crm/forms.py: Customer form.
crm/views.py: CRUD views.
crm/urls.py: App-specific URLs.
mini_django_crm/urls.py: Project URLs.
mini_django_crm/settings.py: Updated settings with crm app.
crm/templates/*.html: Base, list, and form templates.
requirements.txt: Project dependencies.
README.md: Project documentation.


A working SQLite database (db.sqlite3) created via migrations.

Constraints

Dependencies: Use only Django and its built-in features (no external libraries like Django REST Framework or Bootstrap).
Styling: Use minimal, inline CSS to avoid external dependencies.
Database: Use SQLite to keep the setup lightweight.
Scope: Exclude advanced features like user roles, email integration, or analytics to maintain simplicity.

Success Criteria

The system allows users to perform CRUD operations on customer records via the web interface.
The admin interface is accessible to superusers and allows customer management.
The application runs without errors on python manage.py runserver.
The interface is clean, functional, and responsive to user actions (e.g., form validation, delete confirmation).
The codebase is well-organized, commented, and documented in the README.md.

Notes

Inspiration: The system is inspired by the flatplanet/Django-CRM repository, which appears to be a standard Django project based on its manage.py and folder structure (e.g., dcrm, website). This miniature version simplifies the scope to focus on core CRM functionality.
Extensibility: The system should be structured to allow future additions, such as more fields, user authentication, or external styling frameworks.
Testing: Developers should test all views and forms manually to ensure functionality.
Deployment: While not required, the system should be compatible with production deployment (e.g., using Gunicorn and PostgreSQL) with minimal changes.

This prompt provides a clear, detailed guide for developers to create a miniature Django CRM system. If you need specific code snippets or further assistance with implementation, let me know!